package me.skidrunner.critters;

import java.text.Format;
import java.util.Map;

import com.sun.glass.ui.Pixels;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.text.TextAlignment;
import javafx.scene.web.WebEngine;
import javafx.util.Callback;
import javafx.util.StringConverter;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class FunctionManagerController {

    @FXML
    private LineChart<Number,Number> functionChart;
    private XYChart.Series functionChartSeries = new XYChart.Series();

    @FXML private TableView<Function> functionsTable;
    @FXML private TextField functionNameField;

    @FXML private TextArea termArea;

    @FXML private TableView<FunctionParameter> parametersTable;
    @FXML private TextField parameterNameField;
    @FXML private TextField parameterDescriptionField;
    @FXML private TextField parameterValueField;

    private Function selectedFunction;

    @FXML
    protected void initialize() {
        functionChart.getData().add(functionChartSeries);

        functionsTable.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Function>() {
            public void changed(ObservableValue<? extends Function> observable, Function oldValue, Function newValue) {
                selectedFunction = newValue;
                if(selectedFunction != null) {
                    parametersTable.setItems(selectedFunction.getParameters());
                    termArea.setText(selectedFunction.getTerm());
                    updateChart();
                } else {
                    parametersTable.getItems().clear();
                    termArea.clear();
                }
            }
        });

        termArea.textProperty().addListener(new ChangeListener<String>() {
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(selectedFunction != null) {
                    selectedFunction.setTerm(newValue);
                    updateChart();
                }
            }
        });
    }

    @FXML
    protected void addFunction(ActionEvent event) {
        Function newFunction = new Function();
        newFunction.setName(functionNameField.getText());

        functionsTable.getItems().add(newFunction);

        functionNameField.clear();
    }

    @FXML
    protected void addParameter(ActionEvent event) {

        FunctionParameter newParameter = new FunctionParameter();
        newParameter.setName(parameterNameField.getText());
        newParameter.setDescription(parameterDescriptionField.getText());
        newParameter.setValue(Double.parseDouble(parameterValueField.getText()));

        if(selectedFunction != null) {
            selectedFunction.getParameters().add(newParameter);
        }

        parameterNameField.clear();
        parameterDescriptionField.clear();
        parameterValueField.clear();
    }

    private void updateChart() {
        double[][] values = executeFunction(selectedFunction);

        double minValue = Double.POSITIVE_INFINITY;
        double maxValue = Double.NEGATIVE_INFINITY;
        functionChartSeries.getData().clear();
        for(int i = 0; i < values.length; i++) {

            if(values[i][1] < minValue) {
                minValue = values[i][1];
            }

            if(values[i][1] > maxValue) {
                maxValue = values[i][1];
            }

            functionChartSeries.getData().add(new XYChart.Data(values[i][0], values[i][1]));
        }

        functionChart.getData().clear();
        functionChart.getData().add(functionChartSeries);

        ((NumberAxis)functionChart.getYAxis()).setUpperBound(maxValue);
        ((NumberAxis)functionChart.getYAxis()).setLowerBound(minValue);
        ((NumberAxis)functionChart.getYAxis()).setTickUnit(Math.abs(maxValue));
    }

    private double[][] executeFunction(Function function) {
        double[][] values = new double[201][2];

        ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
        ScriptEngine scriptEngine = scriptEngineManager.getEngineByName("JavaScript");

        for(FunctionParameter parameter : function.getParameters()) {
            scriptEngine.put(parameter.getName(), parameter.getValue());
        }

        System.out.println(function.getTerm());

        int i = 0;
        for(double x = -Math.PI; x < Math.PI; x += (Math.PI * 0.01)) {
            scriptEngine.put("x", x);
            try {
                scriptEngine.eval(function.getTerm());
                values[i][1] = ((Number)scriptEngine.get("value")).doubleValue();
                values[i][0] = x;
                i++;
            } catch (ScriptException e) {
                break;
            }
        }
        return values;
    }

}




<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.cell.*?>
<?import javafx.geometry.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.chart.*?>
<?import javafx.scene.layout.*?>

<?import java.lang.*?>

<GridPane hgap="10.0" prefHeight="450.0" prefWidth="800.0" vgap="10.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="me.skidrunner.critters.FunctionManagerController">
    <columnConstraints>
        <ColumnConstraints hgrow="ALWAYS" />
        <ColumnConstraints hgrow="ALWAYS" />
    </columnConstraints>
    <rowConstraints>
        <RowConstraints vgrow="ALWAYS" />
        <RowConstraints vgrow="ALWAYS" />
      <RowConstraints vgrow="NEVER" />
    </rowConstraints>
   <children>
      <LineChart fx:id="functionChart" alternativeRowFillVisible="false" createSymbols="false" horizontalGridLinesVisible="false" legendVisible="false" verticalGridLinesVisible="false">
        <xAxis>
          <NumberAxis side="BOTTOM" autoRanging="false" lowerBound="-3.14" upperBound="3.14" tickUnit="3.14" />
        </xAxis>
        <yAxis>
          <NumberAxis side="LEFT" autoRanging="false" lowerBound="-1" upperBound="1" tickUnit="1" />
        </yAxis>
      </LineChart>
       <VBox GridPane.columnIndex="1">
          <children>
         <TableView fx:id="functionsTable">
           <columns>
             <TableColumn minWidth="-Infinity" prefWidth="400.0" text="Name">
                 <cellValueFactory>
                     <PropertyValueFactory property="name" />
                 </cellValueFactory>
             </TableColumn>
           </columns>
         </TableView>
            <HBox spacing="10.0">
               <children>
                  <TextField fx:id="functionNameField" promptText="Function Name" HBox.hgrow="ALWAYS" />
                  <Button minHeight="-Infinity" minWidth="-Infinity" mnemonicParsing="false" onAction="#addFunction" prefHeight="25.0" prefWidth="52.0" text="Add" />
               </children>
               <padding>
                  <Insets top="10.0" />
               </padding>
            </HBox>
          </children>
       </VBox>
      <TextArea fx:id="termArea" GridPane.rowIndex="1" />
       <VBox GridPane.columnIndex="1" GridPane.rowIndex="1">
          <children>
         <TableView fx:id="parametersTable">
           <columns>
             <TableColumn prefWidth="75.0" text="Name">
                 <cellValueFactory>
                     <PropertyValueFactory property="name" />
                 </cellValueFactory>
             </TableColumn>
             <TableColumn minWidth="0.0" prefWidth="250.0" text="Description">
                 <cellValueFactory>
                     <PropertyValueFactory property="description" />
                 </cellValueFactory>
             </TableColumn>
               <TableColumn prefWidth="75.0" text="Value">
                   <cellValueFactory>
                       <PropertyValueFactory property="value" />
                   </cellValueFactory>
               </TableColumn>
           </columns>
         </TableView>
            <HBox spacing="10.0">
               <children>
                  <TextField fx:id="parameterNameField" promptText="Parameter Name" HBox.hgrow="ALWAYS" />
                  <TextField fx:id="parameterDescriptionField" promptText="Description" HBox.hgrow="ALWAYS" />
                  <TextField fx:id="parameterValueField" promptText="Value" HBox.hgrow="ALWAYS" />
                  <Button minHeight="-Infinity" minWidth="-Infinity" mnemonicParsing="false" onAction="#addParameter" prefHeight="25.0" prefWidth="52.0" text="Add" />
               </children>
               <padding>
                  <Insets top="10.0" />
               </padding>
            </HBox>
          </children>
       </VBox>
      <HBox alignment="TOP_RIGHT" spacing="10.0" GridPane.columnIndex="1" GridPane.rowIndex="2">
         <children>
            <Button minHeight="-Infinity" minWidth="-Infinity" mnemonicParsing="false" prefHeight="25.0" prefWidth="52.0" text="Save" />
            <Button minHeight="-Infinity" minWidth="-Infinity" mnemonicParsing="false" prefHeight="25.0" prefWidth="52.0" text="Cancel" />
         </children>
         <GridPane.margin>
            <Insets />
         </GridPane.margin>
      </HBox>
   </children>
   <padding>
      <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
   </padding>
</GridPane>


package me.skidrunner.critters;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

/**
 * Created by U292337 on 8/15/2016.
 */
public class FunctionManager extends Application {

    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("FXML TableView Example");

        FXMLLoader fxmlLoader = new FXMLLoader();
        Pane pane = fxmlLoader.load(getClass().getResource("/FunctionManager.fxml"));
        //FunctionManagerController functionManagerController = (FunctionManagerController)fxmlLoader.getController();



        Scene myScene = new Scene(pane);
        primaryStage.setResizable(false);
        primaryStage.setScene(myScene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}



package me.skidrunner.critters;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.util.List;

/**
 * Created by U292337 on 8/15/2016.
 */
public class Function {

    private final SimpleStringProperty name = new SimpleStringProperty();
    private final SimpleStringProperty term = new SimpleStringProperty();
    private ObservableList<FunctionParameter> parameters = FXCollections.observableArrayList();

    public Function() {
        this("", "", null);
    }

    public Function(String name, String term, List<FunctionParameter> parameters) {
        setName(name);
        if(term.isEmpty()) {
            term = "value = x;";
        }
        setTerm(term);

        this.parameters.add(new FunctionParameter("x", "Default Parameter", 0));
        this.parameters.add(new FunctionParameter("value", "Default Result", 0));

        if(parameters != null) {
            this.parameters.addAll(parameters);
        }
    }

    public String getName() {
        return name.get();
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getTerm() {
        return term.get();
    }

    public void setTerm(String term) {
        this.term.set(term);
    }

    public ObservableList<FunctionParameter> getParameters() {
        return parameters;
    }

}




package me.skidrunner.critters;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;

/**
 * Created by U292337 on 8/15/2016.
 */
public class FunctionParameter {

    private final SimpleStringProperty name = new SimpleStringProperty();
    private final SimpleStringProperty description = new SimpleStringProperty();
    private final SimpleDoubleProperty value = new SimpleDoubleProperty();

    public FunctionParameter() {
        this("", "", 0);
    }

    public FunctionParameter(String name, String description, double value) {
        setName(name);
        setDescription(description);
        setValue(value);
    }

    public String getName() {
        return name.get();
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getDescription() {
        return description.get();
    }

    public void setDescription(String description) {
        this.description.set(description);
    }

    public double getValue() {
        return value.get();
    }

    public void setValue(double value) {
        this.value.set(value);
    }

}




package me.skidrunner.critters;

import java.text.Format;
import java.util.Map;

import com.sun.glass.ui.Pixels;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.text.TextAlignment;
import javafx.scene.web.WebEngine;
import javafx.util.Callback;
import javafx.util.StringConverter;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class FunctionManagerController {

    @FXML
    private LineChart<Number,Number> functionChart;
    private XYChart.Series functionChartSeries = new XYChart.Series();

    @FXML private TableView<Function> functionsTable;
    @FXML private TextField functionNameField;

    @FXML private TextArea termArea;

    @FXML private TableView<FunctionParameter> parametersTable;
    @FXML private TextField parameterNameField;
    @FXML private TextField parameterDescriptionField;
    @FXML private TextField parameterValueField;

    private Function selectedFunction;

    @FXML
    protected void initialize() {
        functionChart.getData().add(functionChartSeries);

        functionsTable.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Function>() {
            public void changed(ObservableValue<? extends Function> observable, Function oldValue, Function newValue) {
                selectedFunction = newValue;
                if(selectedFunction != null) {
                    parametersTable.setItems(selectedFunction.getParameters());
                    termArea.setText(selectedFunction.getTerm());
                    updateChart();
                } else {
                    parametersTable.getItems().clear();
                    termArea.clear();
                }
            }
        });

        termArea.textProperty().addListener(new ChangeListener<String>() {
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(selectedFunction != null) {
                    selectedFunction.setTerm(newValue);
                    updateChart();
                }
            }
        });
    }

    @FXML
    protected void addFunction(ActionEvent event) {
        Function newFunction = new Function();
        newFunction.setName(functionNameField.getText());

        functionsTable.getItems().add(newFunction);

        functionNameField.clear();
    }

    @FXML
    protected void addParameter(ActionEvent event) {

        FunctionParameter newParameter = new FunctionParameter();
        newParameter.setName(parameterNameField.getText());
        newParameter.setDescription(parameterDescriptionField.getText());
        newParameter.setValue(Double.parseDouble(parameterValueField.getText()));

        if(selectedFunction != null) {
            selectedFunction.getParameters().add(newParameter);
        }

        parameterNameField.clear();
        parameterDescriptionField.clear();
        parameterValueField.clear();
    }

    private void updateChart() {
        double[][] values = executeFunction(selectedFunction);

        double minValue = Double.POSITIVE_INFINITY;
        double maxValue = Double.NEGATIVE_INFINITY;
        functionChartSeries.getData().clear();
        for(int i = 0; i < values.length; i++) {

            if(values[i][1] < minValue) {
                minValue = values[i][1];
            }

            if(values[i][1] > maxValue) {
                maxValue = values[i][1];
            }

            functionChartSeries.getData().add(new XYChart.Data(values[i][0], values[i][1]));
        }

        functionChart.getData().clear();
        functionChart.getData().add(functionChartSeries);

        ((NumberAxis)functionChart.getYAxis()).setUpperBound(maxValue);
        ((NumberAxis)functionChart.getYAxis()).setLowerBound(minValue);
        ((NumberAxis)functionChart.getYAxis()).setTickUnit(Math.abs(maxValue));
    }

    private double[][] executeFunction(Function function) {
        double[][] values = new double[201][2];

        ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
        ScriptEngine scriptEngine = scriptEngineManager.getEngineByName("JavaScript");

        for(FunctionParameter parameter : function.getParameters()) {
            scriptEngine.put(parameter.getName(), parameter.getValue());
        }

        System.out.println(function.getTerm());

        int i = 0;
        for(double x = -Math.PI; x < Math.PI; x += (Math.PI * 0.01)) {
            scriptEngine.put("x", x);
            try {
                scriptEngine.eval(function.getTerm());
                values[i][1] = ((Number)scriptEngine.get("value")).doubleValue();
                values[i][0] = x;
                i++;
            } catch (ScriptException e) {
                break;
            }
        }
        return values;
    }

}



